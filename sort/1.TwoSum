/*
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

示例：
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-sum
*/

//暴力破解
int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    int *n = (int *)malloc(sizeof(int) * 2);
    if (n == NULL)
    {
        *returnSize = 0;
        return NULL;
    }

    for(int i=0; i < numsSize-1; i++){
        for(int j=i+1; j < numsSize; j++){
            if(nums[i] + nums[j] == target){
                n[0] = i;
                n[1] = j;
                *returnSize = 2;
                return n;
            }
        }
    }
    *returnSize = 0;
    return n;
}

//快排+二分查找
typedef struct NumsArray{
    int val;
    int id;
}NumsArray;

int cmp(const void *a, const void *b)
{
     return ((NumsArray*)a)->val - ((NumsArray*)b)->val;
}

int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    int *n = (int *)malloc(sizeof(int) * 2);
    if (n == NULL)
    {
        *returnSize = 0;
        return NULL;
    }
    
    NumsArray *numsarray = (NumsArray*)malloc(sizeof(NumsArray) * numsSize);
    for(int i=0; i < numsSize; i++)
    {
        numsarray[i].val = nums[i];
        numsarray[i].id = i;
    }
    
    qsort(numsarray, numsSize, sizeof(numsarray[0]), cmp);
    
    for(int i=0; i < numsSize; i++)
    {
        NumsArray key;
        key.val = target - numsarray[i].val;
        key.id = -1;
        
        NumsArray *item = (int*)bsearch(&key, &numsarray[i+1], numsSize-i-1, sizeof(numsarray[0]), cmp);
                           
        if( item != NULL ){
            n[0] = numsarray[i].id;
            n[1] = item->id;
            *returnSize = 2;
            return n;
        }
    }
    *returnSize = 0;
    return n;
}
